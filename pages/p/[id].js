import dynamic from 'next/dynamic';
import { PerspectiveCamera, Center } from '@react-three/drei';
import M from '@/Components/three/M';
import Button from '@/Components/Button';
import Footer from '@/Components/Footer';
import Header from '@/Components/Header';
import { useEffect, useState } from 'react';
import starImage from '../../public/star.svg';
import axios from 'axios';
import { useRouter } from 'next/router';
import KeyLight from '@/Components/three/KeyLight';
import ScrollBar from '@/Components/ScrollBar';
import {
  changeGender,
  changeColor,
  changeSize,
  removeChanges,
} from '@/Components/Context/currentRedux';
import { useDispatch, useSelector } from 'react-redux';
import Head from 'next/head';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import { url as u } from '@/Credentials/url';

const proizvod = () => {
  const { color, size, gender } = useSelector((state) => state.currentProduct);

  const [selecetdGender, setGender] = useState({});
  const [getProduct, setProduct] = useState([]);
  const [error, setError] = useState('');

  const dispatch = useDispatch();

  const router = useRouter();
  const { id } = router.query;

  useEffect(() => {
    dispatch(removeChanges());
  }, []);

  useEffect(() => {
    if (id !== undefined) {
      axios.get(`${u}/p/${id}`).then((res) => setProduct(res.data));
    }
  }, [id]);

  const property = getProduct[0] && JSON.parse(getProduct[0].properties);

  const model = getProduct[0] && getProduct[0].model;
  const url = `../Meshes/${id}/${model}`;

  const p = property !== undefined && property.properties.sizes;

  const images = getProduct[0] && JSON.parse(getProduct[0].productsImage);

  const validateData = () => {
    if (property) {
      if (property.properties.gender === 'null') {
        router.push(`/editor?pid=${getProduct[0] && getProduct[0].id}`);
      } else {
        if (color && color && size && gender) {
          router.push(`/editor?pid=${getProduct[0] && getProduct[0].id}`);
        } else {
          setError('Rod, veliƒçina i boja moraju biti izabrani');
        }
      }
    }
  };

  const imagesSlider = {
    slidesToShow: 1,
    slidesToScroll: 1,
    arrows: false,
    dots: true,
  };

  return (
    <div>
      <Head>
        <title>BuzzMall.co - {getProduct[0] && getProduct[0].modelName}</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/HomePage/favicon.png' />
      </Head>
      {model ? (
        <>
          <ScrollBar />
          <Header />
          <div className='relative'>
            <div className='pt-[200px] pb-[60px] xs:pt-[150px]'>
              <div className='flex justify-center gap-80 relative z-[2] 2xl:gap-40 lg:justify-center lg:px-14 md:px-5 md:gap-20 sm:gap-10 sm:flex-col'>
                <div className='w-[400px] h-[400px] lg:flex-1 lg:w-full lg:h-auto  sm:h-[310px]'>
                  {images && (
                    <Slider {...imagesSlider}>
                      {images.properties.map((el) => {
                        return (
                          <img
                            src={`../productsImages/${
                              getProduct[0] && getProduct[0].promoId
                            }/${el}`}
                          />
                        );
                      })}
                    </Slider>
                  )}
                </div>
                <div className='lg:flex-1'>
                  <h1 className='font-bold text-xl mb-5'>
                    {getProduct[0] && getProduct[0].modelName} -{' '}
                    {getProduct[0] && getProduct[0].promoId}
                  </h1>
                  <div className='mb-10'>
                    <div className='mb-5'>
                      <p className='text-[14px] nunito'>Cena jednog komada</p>
                      <p
                        className={`font-[900] text-[25px] my-2 ${
                          getProduct[0] &&
                          getProduct[0].discountPrice &&
                          '!text-[20px] line-through'
                        }`}
                      >
                        {getProduct[0] && getProduct[0].price} din
                      </p>
                    </div>
                    <div className='flex gap-5 justify-between lg:justify-start lg:gap-5'>
                      {property && Array.isArray(property.properties)
                        ? property.properties.map((e, index) => {
                            return (
                              <div key={index}>
                                <div
                                  className={`text-center border border-black py-2 px-4 rounded-md flex-1 cursor-pointer ${
                                    selecetdGender.name == e.gender.name
                                      ? 'text-white bg-black'
                                      : 'text-black bg-transparent'
                                  }`}
                                  onClick={() => {
                                    dispatch(removeChanges());

                                    setGender({
                                      ...selecetdGender,
                                      name: e.gender.name,
                                      color: undefined,
                                      size: undefined,
                                    });

                                    dispatch(changeGender(e.gender.name));
                                  }}
                                >
                                  {e.gender.name}
                                </div>
                              </div>
                            );
                          })
                        : 'Dimensions:' + ' ' + p}
                    </div>
                    <div>
                      <div className='flex gap-1 mt-5'>
                        {property &&
                          Array.isArray(property.properties) &&
                          property.properties.map((e) => {
                            return (
                              selecetdGender.name == e.gender.name &&
                              e.sizes.map((el, index) => {
                                return (
                                  <div
                                    key={index}
                                    onClick={() => {
                                      setGender({
                                        ...selecetdGender,
                                        size: el,
                                      });

                                      dispatch(changeSize(el));
                                    }}
                                    className={`border border-black p-1 px-2 rounded-md 
                                    cursor-pointer ${
                                      selecetdGender.size == el
                                        ? 'bg-black text-white'
                                        : 'bg-transparent'
                                    }`}
                                  >
                                    {el}
                                  </div>
                                );
                              })
                            );
                          })}
                      </div>
                      <div className='flex gap-1 mt-3'>
                        {property &&
                          Array.isArray(property.properties) &&
                          property.properties.map((e, index) => {
                            return (
                              selecetdGender.name == e.gender.name &&
                              e.meshes.map((el) => {
                                return (
                                  <div
                                    key={index}
                                    onClick={() => {
                                      setGender({
                                        ...selecetdGender,
                                        color: el.code,
                                      });

                                      dispatch(
                                        changeColor({
                                          code: el.code,
                                          color: el.color,
                                          promoId: el.promoId,
                                        })
                                      );
                                    }}
                                    className={`border-2 border-black text-sm p-1 px-2 rounded-md
                                    cursor-pointer ${
                                      selecetdGender.color &&
                                      selecetdGender.color.x === el.code.x &&
                                      selecetdGender.color.y === el.code.y &&
                                      selecetdGender.color.z === el.code.z
                                        ? 'border-black'
                                        : 'border-transparent'
                                    }`}
                                  >
                                    {el.color}
                                  </div>
                                );
                              })
                            );
                          })}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className='flex justify-center mt-20 gap-10 z-[2] xs:flex-col xs:pl-4'>
                <div className='z-[2]'>
                  <div onClick={validateData}>
                    <Button
                      text='Novi Dizajn'
                      bck='bg-[#fff]'
                      onClick={validateData}
                    />
                  </div>
                  <div className='z-[2] mt-3 text-red-400 text-sm'>
                    {error !== '' ? error : ''}
                  </div>
                </div>
              </div>
            </div>
            <div className='absolute bottom-0 left-0 bg-white w-[350px] flex justify-center py-3 2xl:right-0 2xl:left-auto 2xl:w-[250px] md:bottom-[-50px] sm:bottom-[-70px]'>
              {getProduct[0] && getProduct[0].mostPopular == 'true' && (
                <h1 className='capitalize nunito italic font-[900] text-[28px] 3xl:text-[25px] 2xl:text-[21px] flex gap-2'>
                  <div className='flex flex-col justify-center'>
                    <span className='nunito'>most</span>
                    <span className='nunito text-border block pl-7'>
                      popular
                    </span>
                  </div>
                </h1>
              )}
            </div>
          </div>

          <div className='my-20'>
            <div className='w-[60%] mx-auto my-0 sm:w-full sm:pl-5'>
              <div>
                <div className='mb-6'>
                  <p className='font-[600] text-[18px]'>Informacije</p>
                  <div className='h-[3px] w-[100px] bg-primary'></div>
                </div>
                <div>
                  {getProduct[0] && <div>{getProduct[0].information}</div>}
                </div>
              </div>
            </div>
          </div>
          <Footer />
        </>
      ) : (
        'Greska u serveru pri dobavljanju podataka, pokusajte da refreshujete browser'
      )}
    </div>
  );
};

export default proizvod;
